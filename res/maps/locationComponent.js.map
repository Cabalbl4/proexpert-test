{"version":3,"sources":["locationComponent.js"],"names":["Location","geolocation","PROEXPERT","GEOLOCATION","Geolocation","cityproposal","input","target","value","onkeypress","e","keyCode","_toggleCity","bind","_calculateGeo","_location","props","locationWaiter","console","log","_fireLocation","name","_e","preventDefault","geoPromise","currentCoordinates","alert","then","coords","pos","lat","latitude","lon","longitude","React","Component"],"mappings":";;;;;;;;;;IAAMA,Q;;;AACJ,wBAAc;AAAA;;AAAA;;AAEV,cAAKC,WAAL,GAAmB,IAAIC,UAAUC,WAAV,CAAsBC,WAA1B,EAAnB;AACA,cAAKC,YAAL,GAAoB,EAApB;AAHU;AAIb;;;;iCACQ;AAAA;;AACP,mBACE;AAAA;AAAA,kBAAK,WAAU,2BAAf;AACE;AAAA;AAAA,sBAAK,WAAU,YAAf;AACI,mDAAO,cAAP,EAAgB,aAAY,YAA5B,EAAyC,UAAU,kBAACC,KAAD,EAAW;AAAC,mCAAKD,YAAL,GAAoBC,MAAMC,MAAN,CAAaC,KAAjC;AAAuC,yBAAtG;AACA,6BAAM,aAACF,KAAD,EAAW;AAAE,gCAAGA,KAAH,EAAUA,MAAMG,UAAN,GAAiB,UAACC,CAAD,EAAO;AAAE,oCAAGA,EAAEC,OAAF,IAAa,EAAhB,EAAoB,OAAKC,WAAL;AAAoB,6BAAlE;AAAmE;AADhG,sBADJ;AAII;AAAA;AAAA,0BAAQ,SAAS,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAjB;AAA8C;AAAA;AAAA,8BAAG,WAAU,gBAAb;AAAA;AAAA;AAA9C;AAJJ,iBADF;AAOE;AAAA;AAAA,sBAAK,WAAU,mBAAf;AAAA;AAAA,iBAPF;AAQE;AAAA;AAAA,sBAAK,WAAU,qBAAf;AAAA;AAA4C;AAAA;AAAA,0BAAG,WAAU,mBAAb,EAAiC,MAAK,GAAtC,EAA0C,SAAS,KAAKC,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAAnD;AAAA;AAAA;AAA5C;AARF,aADF;AAYD;;;sCAEaE,S,EAAW;AACrB,iBAAKC,KAAL,CAAWC,cAAX,CAA0BF,SAA1B;AACH;;;sCAEa;AACVG,oBAAQC,GAAR,CAAY,MAAZ,EAAoB,KAAKd,YAAzB;AACA,gBAAG,CAAE,KAAKA,YAAV,EAAwB;AACpB;AACH;AACD,iBAAKe,aAAL,CAAmB;AACfC,sBAAM,KAAKhB;AADI,aAAnB;AAGH;;;sCAEaiB,E,EAAI;AAAA;;AACdA,eAAGC,cAAH;AACAL,oBAAQC,GAAR,CAAY,cAAZ;AACA,gBAAMK,aAAa,KAAKvB,WAAL,CAAiBwB,kBAAjB,EAAnB;AACA,gBAAG,CAAED,UAAL,EAAiB;AACXE,sBAAM,2BAAN;AACL,aAFD,MAEO;AACHF,2BAAWG,IAAX,CAAgB,UAACC,MAAD,EAAU;AACtB,2BAAKR,aAAL,CAAmB;AACbS,6BAAK;AACDC,iCAAKF,OAAOA,MAAP,CAAcG,QADlB;AAEDC,iCAAKJ,OAAOA,MAAP,CAAcK;AAFlB;AADQ,qBAAnB;AAMH,iBAPD,EAOG,YAAI;AACHP,0BAAM,2BAAN;AACH,iBATD;AAUH;AACJ;;;;EArDoBQ,MAAMC,S","file":"../components/locationComponent.js","sourcesContent":["class Location extends React.Component {\n  constructor() {\n      super();\n      this.geolocation = new PROEXPERT.GEOLOCATION.Geolocation();\n      this.cityproposal = \"\"; \n  }\n  render() {\n    return (\n      <div className=\"component location-picker\">\n        <div className=\"name-input\">\n            <input required placeholder=\"input city\" onChange={(input) => {this.cityproposal = input.target.value}}\n            ref={ (input) => { if(input) input.onkeypress=(e) => { if(e.keyCode == 13) this._toggleCity() }}}\n            ></input>\n            <button onClick={this._toggleCity.bind(this)}><i className=\"material-icons\">search</i></button>\n        </div>\n        <div className=\"location-orspacer\">or</div>\n        <div className=\"location-linkholder\">use my <a className=\"location-geo-link\" href=\"#\" onClick={this._calculateGeo.bind(this)}>current position</a></div>\n      </div>\n    );\n  }\n\n  _fireLocation(_location) {\n      this.props.locationWaiter(_location);\n  }\n\n  _toggleCity() {\n      console.log(\"city\", this.cityproposal);\n      if(! this.cityproposal) {\n          return;\n      }\n      this._fireLocation({\n          name: this.cityproposal\n      });\n  }\n\n  _calculateGeo(_e) {\n      _e.preventDefault();\n      console.log(\"calculateGeo\");\n      const geoPromise = this.geolocation.currentCoordinates();\n      if(! geoPromise) {\n            alert(\"Error getting coordinates\");\n      } else {\n          geoPromise.then((coords)=>{\n              this._fireLocation({\n                    pos: {\n                        lat: coords.coords.latitude,\n                        lon: coords.coords.longitude\n                    }\n                });\n          }, ()=>{\n              alert(\"Error getting coordinates\");\n          });\n      }\n  }\n}\n"]}