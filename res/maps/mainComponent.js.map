{"version":3,"sources":["mainComponent.js"],"names":["Main","weatherProvider","PROEXPERT","DATASTORAGE","state","weather","lastSaved","listener","_setWeatherData","bind","subscribe","_weather","console","log","setState","_location","setLocation","deleteLocation","unsubscribe","_locationDelete","_locationAccept","React","Component","window","onload","appElement","ReactDOM","render","document","getElementById"],"mappings":";;;;;;;;;;;;IAAMA,I;;;AACJ,kBAAc;AAAA;;AAAA;;AAEZ,UAAKC,eAAL,GAAuBC,UAAUC,WAAV,CAAsBF,eAA7C;AACA,UAAKG,KAAL,GAAa;AACXC,eAAS,MAAKJ,eAAL,CAAqBK,SAArB;AADE,KAAb;AAGA,UAAKC,QAAL,GAAgB,MAAKC,eAAL,CAAqBC,IAArB,OAAhB;AACA,UAAKR,eAAL,CAAqBS,SAArB,CAA+B,MAAKH,QAApC;AAPY;AAQb;;;;+BAEU;AACT,aAAO,KAAKH,KAAL,CAAWC,OAAlB;AACD;;;oCAEeM,Q,EAAU;AACtBC,cAAQC,GAAR,CAAY,oBAAZ;AACA,WAAKC,QAAL,CAAc,EAACT,SAASM,QAAV,EAAd;AACH;;;oCAEeI,S,EAAW;AACzBH,cAAQC,GAAR,CAAY,qBAAZ,EAAmCE,SAAnC;AACA,WAAKd,eAAL,CAAqBe,WAArB,CAAiCD,SAAjC;AACD;;;sCAEiB;AAChB,WAAKd,eAAL,CAAqBgB,cAArB;AACA,WAAKH,QAAL,CAAc,EAACT,SAAS,IAAV,EAAd;AACD;;;2CAEsB;AACrB;AACA,WAAKJ,eAAL,CAAqBiB,WAArB,CAAiC,KAAKX,QAAtC;AACD;;;6BAEQ;AACR,UAAG,KAAKH,KAAL,CAAWC,OAAd,EAAuB;AACrBO,gBAAQC,GAAR,CAAY,KAAKT,KAAL,CAAWC,OAAvB;AACA,eAAO,oBAAC,WAAD,IAAa,SAAS,KAAKc,eAAL,CAAqBV,IAArB,CAA0B,IAA1B,CAAtB,EAAuD,SAAS,KAAKE,QAAL,CAAcF,IAAd,CAAmB,IAAnB,CAAhE,GAAP;AACD,OAHD,MAGO;AACJ,eACE,oBAAC,QAAD,IAAU,gBAAgB,KAAKW,eAAL,CAAqBX,IAArB,CAA0B,IAA1B,CAA1B,GADF;AAGF;AACD;;;;EA5CgBY,MAAMC,S;;AAgDzB;;;;;AAGAC,OAAOC,MAAP,GAAc,YAAW;AACrB,MAAMC,aAAa,oBAAC,IAAD,OAAnB;AACAC,WAASC,MAAT,CAAgBF,UAAhB,EAA4BG,SAASC,cAAT,CAAwB,MAAxB,CAA5B;AACH,CAHD","file":"../components/mainComponent.js","sourcesContent":["class Main extends React.Component {\n  constructor() {\n    super();\n    this.weatherProvider = PROEXPERT.DATASTORAGE.weatherProvider;\n    this.state = {\n      weather: this.weatherProvider.lastSaved()\n    } \n    this.listener = this._setWeatherData.bind(this)\n    this.weatherProvider.subscribe(this.listener);\n  }\n\n  _weather() {\n    return this.state.weather;\n  }\n\n  _setWeatherData(_weather) {\n      console.log(\"Accept new weather\");\n      this.setState({weather: _weather});\n  }\n\n  _locationAccept(_location) {\n    console.log(\"Accept new location\", _location);\n    this.weatherProvider.setLocation(_location);\n  }\n\n  _locationDelete() {\n    this.weatherProvider.deleteLocation();\n    this.setState({weather: null});\n  } \n\n  componentWillUnmount() {\n    super.componentWillUnmount();\n    this.weatherProvider.unsubscribe(this.listener);\n  }\n\n  render() {\n   if(this.state.weather) {\n     console.log(this.state.weather);\n     return <DataDisplay destroy={this._locationDelete.bind(this)} weather={this._weather.bind(this)}/>\n   } else {\n      return (\n        <Location locationWaiter={this._locationAccept.bind(this) }/>\n      );\n   }\n  }\n}\n\n\n/**\n * bootstrap\n */\nwindow.onload=function() {\n    const appElement = <Main/>;\n    ReactDOM.render(appElement, document.getElementById(\"main\"));\n}"]}